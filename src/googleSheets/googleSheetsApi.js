import { GoogleSpreadsheet } from 'google-spreadsheet';
import googleSheetsConfig from './config';

// Initialize the sheet - doc ID is the long id in the sheets URL
const doc = new GoogleSpreadsheet(googleSheetsConfig.GOOGLE_SPREADSHEET_ID);

const init = async () => {
    // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
    await doc.useServiceAccountAuth({
        // env var values are copied from service account credentials generated by google
        // see "Authentication" section in docs for more info
        client_email: googleSheetsConfig.GOOGLE_SERVICE_ACCOUNT_EMAIL,
        private_key: googleSheetsConfig.GOOGLE_PRIVATE_KEY.replace(/\\n/g, "\n")
    });
}

await init();

const transformRow = (row) => {
    return Object.freeze({
        timestamp: row.timestamp,
        date: row.date,
        procedures: row.procedures,
        worker: row.worker,
        totalPriceBeforeTaxes: row.totalPriceBeforeTaxes,
        totalPriceAfterTaxes: row.totalPriceAfterTaxes
    });
}

const getDataSheet = async () => {
    await doc.loadInfo();
    return doc.sheetsByTitle[googleSheetsConfig.GOOGLE_SPREADSHEET_LIST_NAME];
}

const getDocInfo = async () => {
    await doc.loadInfo(); // loads document properties and worksheets

    return {
        spreadsheetId: doc.spreadsheetId,
        title: doc.title,
        locale: doc.locale,
        timeZone: doc.timeZone,
        autoRecalc: doc.autoRecalc,
        defaultFormat: doc.defaultFormat,
        spreadsheetTheme: doc.spreadsheetTheme,
        iterativeCalculationSettings: doc.iterativeCalculationSettings
    }
}

const getAll = async () => {
    console.debug('googleSheetsApi.getAll()');
    const dataSheet = await getDataSheet();
    console.debug('dataSheet', dataSheet.title);

    const rawDataSet = await dataSheet.getRows({
        offset: 1
    });

    const dataSet = rawDataSet.map(transformRow);

    console.debug(dataSet);
    return dataSet;
}

const addRow = async (data) => {
    console.debug('googleSheetsApi.addRow()', data);
    const dataSheet = await getDataSheet();
    console.debug('dataSheet', dataSheet.title);

    const options = {
        raw: false,
        insert: false
    }

    const rawDataSet = await dataSheet.addRow({ ...data, timestamp: Date.now() }, options);
    const dataSet = transformRow(rawDataSet);

    return dataSet;
}

const googleSheetsApi = Object.freeze({
    getDocInfo,
    getAll,
    addRow
});

export default googleSheetsApi;